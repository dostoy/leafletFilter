L.TimeDimension.Layer.GeoJson.TimeCoverage = L.TimeDimension.Layer.GeoJson.extend({
    _getFeatureTimeCoverageStart: function(feature) {
        if (!feature.properties) {
            return null;
        }
        if (feature.properties.hasOwnProperty('timeCoverageStart')) {
            return feature.properties.timeCoverageStart;
        }
        return null;
    },

    _getFeatureTimeCoverageEnd: function(feature) {
        if (!feature.properties) {
            return null;
        }
        if (feature.properties.hasOwnProperty('timeCoverageEnd')) {
            return feature.properties.timeCoverageEnd;
        }
        return null;
    },

    // Do not modify features. Return the feature maxTime (currentTime) intersects
    // with its time coverage
    _getFeatureBetweenDates: function(feature, minTime, maxTime) {
        var startTime = this._getFeatureTimeCoverageStart(feature);
        var endTime = this._getFeatureTimeCoverageEnd(feature);
        if (!startTime && !endTime) {
            return feature;
        }
        if (startTime && maxTime < startTime){
            return null;
        }
        if (endTime && maxTime > endTime){
            return null;
        }
        return feature;
    },

});

L.timeDimension.layer.geoJson.timeCoverage = function(layer, options) {
    return new L.TimeDimension.Layer.GeoJson.TimeCoverage(layer, options);
};

var currentMonth = new Date();
currentMonth.setUTCDate(1, 0, 0, 0, 0);

var map = L.map('map', {
    zoom: 5,
    fullscreenControl: true,
    timeDimensionControl: true,
    timeDimensionControlOptions: {
        position: 'bottomleft',
        playerOptions: {
            transitionTime: 125,
            loop: true,
        }
    },
    timeDimension: true,
    timeDimensionOptions:{
        timeInterval: "2000-01/" + dateFormat(currentMonth, "yyyy-mm"),
        period: "P1M",
        currentTime: currentMonth.getTime()
    },
    center: [42, 7]
});

var baseLayers = getCommonBaseLayers(map); // see baselayers.js
L.control.layers(baseLayers, {}).addTo(map);

var testGeoJson = {
    "type": "FeatureCollection",
    "features": []
};

var randomLatitude = function(){
    // 34 to 47
    var latitude = 34.0 + 13.0*Math.random();
    latitude = latitude.toFixed(5);
    return latitude;
}
var randomLongitude = function(){
    // -3 to 26
    var longitude = -3 + 29.0*Math.random();
    longitude = longitude.toFixed(5);
    return longitude;
}

var randomTimeCoverage = function(){
    var timeStart = Date.parse('2000-01');
    var timeEnd = new Date().getTime();
    var interval = timeEnd - timeStart;

    var tcStart = timeStart + interval*Math.random();
    interval = timeEnd - tcStart;
    var tcEnd = timeStart + interval*Math.random();
    return [Math.floor(tcStart), Math.floor(tcEnd)];
}


for (var i=0; i<100; i++){
    var timeCoverage = randomTimeCoverage();
    var point = {
        "type": "Feature",
        "geometry": {
            "type": "Point",
            "coordinates": [randomLongitude(), randomLatitude()],
        },
        "properties": {
            "timeCoverageStart": timeCoverage[0],
            "timeCoverageEnd": timeCoverage[1]
        }
    };
    testGeoJson.features.push(point);
}

var geoJsonLayer = L.geoJson(testGeoJson, {

});

// geoJsonLayer.addTo(map);

L.timeDimension.layer.geoJson.timeCoverage(geoJsonLayer, {}).addTo(map);
