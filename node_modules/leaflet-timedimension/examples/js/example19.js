L.TimeDimension.Layer.BikeLayer = L.TimeDimension.Layer.GeoJson.extend({

    // Do not modify features. Just return the feature if it intersects
    // the time interval
    _getFeatureBetweenDates: function(feature, minTime, maxTime) {
        var featureStringTimes = this._getFeatureTimes(feature);
        if (featureStringTimes.length == 0) {
            return feature;
        }
        var featureTimes = [];
        for (var i = 0, l = featureStringTimes.length; i < l; i++) {
            var time = featureStringTimes[i]
            if (typeof time == 'string' || time instanceof String) {
                time = Date.parse(time.trim());
            }
            featureTimes.push(time);
        }

        if (featureTimes[0] > maxTime || featureTimes[l - 1] < minTime) {
            return null;
        }
        return feature;
    },

});

L.timeDimension.layer.bikeLayer = function(layer, options) {
    return new L.TimeDimension.Layer.BikeLayer(layer, options);
};


var startDate = new Date();
startDate.setUTCHours(0, 0, 0, 0);

var map = L.map('map', {
    zoom: 17,
    fullscreenControl: true,
    center: [-37.9, 144.666],
    timeDimension: true,
    timeDimensionControl: true,    
});

$.getJSON("data/bike.geojson",function(bikeData){
    var geojsonLayer = L.geoJson(bikeData);
    var bikeTimeLayer = L.timeDimension.layer.bikeLayer(geojsonLayer, {
        waitForReady: true,
        updateTimeDimension: true
    });
    // geojsonLayer.addTo(map);
    bikeTimeLayer.addTo(map);
});

var osmLayer = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
});

var layersControl = L.control.layers({"OSM": osmLayer}, {});
layersControl.addTo(map);
osmLayer.addTo(map);
